module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    input camera,
    output laser1,
    output laser2,
    output laser3,
    output laser4,
    output ttl1,
    output ttl2,
    output ttl3,
    output ttl4
  ) {
   
  sig rst;                  // reset signal
   
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
     
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr;
      reg_interface reg;
       
      lasertrigger l1;
      lasertrigger l2;
      lasertrigger l3;
      lasertrigger l4;
      
      dff sequence[4][16];
      dff duration[4][16];
      dff mode[4][3];
      
      dff ttl[4];
    }
  }

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
     
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf;           // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
     
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
     
    // connect reg interface to avr interface
    reg.rx_data = avr.rx_data;
    reg.new_rx_data = avr.new_rx_data;
    avr.tx_data = reg.tx_data;
    avr.new_tx_data = reg.new_tx_data;
    reg.tx_busy = avr.tx_busy;
     
    reg.regIn.drdy = 0;                   // default to not ready
    reg.regIn.data = 32bx;                // don't care
     
    if (reg.regOut.new_cmd) {             // new command
      if (reg.regOut.write) {             // if write
        if (reg.regOut.address == 0) {                  // laser1
          sequence.d[0] = reg.regOut.data[15:0];  
        } else if (reg.regOut.address == 1) {    
          mode.d[0] = reg.regOut.data[2:0];  
        } else if (reg.regOut.address == 2) {    
          duration.d[0] = reg.regOut.data[15:0];  
        } else if (reg.regOut.address == 3) {    
          sequence.d[1] = reg.regOut.data[15:0];        // laser2 
        } else if (reg.regOut.address == 4) {    
          mode.d[1] = reg.regOut.data[2:0];  
        } else if (reg.regOut.address == 5) {    
          duration.d[1] = reg.regOut.data[15:0];  
        } else if (reg.regOut.address == 6) {    
          sequence.d[2] = reg.regOut.data[15:0];        // laser3
        } else if (reg.regOut.address == 7) {    
          mode.d[2] = reg.regOut.data[2:0];  
        } else if (reg.regOut.address == 8) {    
          duration.d[2] = reg.regOut.data[15:0];  
        } else if (reg.regOut.address == 9) {    
          sequence.d[3] = reg.regOut.data[15:0];        // laser4  
        } else if (reg.regOut.address == 10) {    
          mode.d[3] = reg.regOut.data[2:0];  
        } else if (reg.regOut.address == 11) {    
          duration.d[3] = reg.regOut.data[15:0];  
        } else if (reg.regOut.address == 12){
          ttl.d[0] = reg.regOut.data[0];
        } else if (reg.regOut.address == 13){
          ttl.d[1] = reg.regOut.data[0];
        } else if (reg.regOut.address == 14){
          ttl.d[2] = reg.regOut.data[0];
        } else if (reg.regOut.address == 15){
          ttl.d[3] = reg.regOut.data[0];
        }
      } else {                            // if read
     
      }
    }
    
    ///////////////// Lasers
    l1.trig = camera;
    l1.seq = sequence.q[0];
    l1.mod = mode.q[0];
    l1.dura = duration.q[0];
    
    l2.trig = camera;
    l2.seq = sequence.q[1];
    l2.mod = mode.q[1];
    l2.dura = duration.q[1];
    
    l3.trig = camera;
    l3.seq = sequence.q[2];
    l3.mod = mode.q[2];
    l3.dura = duration.q[2];
    
    l4.trig = camera;
    l4.seq = sequence.q[3];
    l4.mod = mode.q[3];
    l4.dura = duration.q[3];
    
    laser1 = l1.lasersignal;
    laser2 = l2.lasersignal;
    laser3 = l3.lasersignal;
    laser4 = l4.lasersignal;
    
    //////////////// TTLs
    ttl1 = ttl.q[0];
    ttl2 = ttl.q[1];
    ttl3 = ttl.q[2];
    ttl4 = ttl.q[3];
    
    led = 0;                         // connect the dff
  }
}